name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:  # Allow manual triggering for testing
    inputs:
      test_release:
        description: 'Test release workflow (simulates release event)'
        required: false
        default: 'false'
        type: boolean

# Add permissions for GitHub token
permissions:
  contents: write
  packages: write
  pull-requests: read
  actions: read

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_FRAMEWORK_VERSION: '9.0.x'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libc6-dev

      - name: Run build script (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          ./scripts/build.ps1

      - name: Run comprehensive build script (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "🏗️ Running comprehensive build script..."
          chmod +x scripts/build.sh
          ./scripts/build.sh

          # Verify the build was successful
          echo "📋 Verifying build output:"
          find src/GrepSQL/runtimes/ -name "libpgquery_wrapper.*" -type f || echo "No native libraries found"

      - name: Debug - Show available files
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "=== Main project output directory ==="
          ls -la src/GrepSQL/bin/Release/net8.0/ || echo "Main project bin not found"
          echo "Contents of src/GrepSQL/:"
          ls -la src/GrepSQL/ || echo "GrepSQL directory not found"
          find src/GrepSQL/runtimes/ -type f 2>/dev/null || echo "No runtimes directory"

      - name: Copy native libraries to test project
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Determine platform
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            TARGET_RID="linux-x64"
            LIBRARY_EXT="so"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            if [[ $(uname -m) == "arm64" ]]; then
              TARGET_RID="osx-arm64"
            else
              TARGET_RID="osx-x64"
            fi
            LIBRARY_EXT="dylib"
          fi
          
          # Copy native libraries to test project output
          TEST_OUTPUT_DIR="tests/GrepSQL.Tests/bin/Release/net9.0"
          mkdir -p "$TEST_OUTPUT_DIR/runtimes/$TARGET_RID/native"
          
          if [ -f "src/GrepSQL/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" ]; then
            mkdir -p "$TEST_OUTPUT_DIR/runtimes/$TARGET_RID/native"
            cp "src/GrepSQL/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" "$TEST_OUTPUT_DIR/runtimes/$TARGET_RID/native/"
            echo "Copied library to test runtimes directory"
            # Also copy to test output directory root for fallback
            cp "src/GrepSQL/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT" "$TEST_OUTPUT_DIR/"
            echo "Copied library to test output root"
            echo "Test directory contents:"
            ls -la "$TEST_OUTPUT_DIR/"
          else
            echo "Warning: Native library not found at src/GrepSQL/runtimes/$TARGET_RID/native/libpgquery_wrapper.$LIBRARY_EXT"
            echo "Available files in src/GrepSQL/runtimes/:"
            find src/GrepSQL/runtimes/ -name "*.so" -o -name "*.dylib" || echo "No native libraries found"
        fi

      - name: Copy native libraries to test project (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $TARGET_RID = 'win-x64'
          $LIB_PATH = "src\GrepSQL\runtimes\$TARGET_RID\native\libpgquery_wrapper.dll"
          $TEST_OUTPUT = "tests\GrepSQL.Tests\bin\Release\net9.0"
          New-Item -ItemType Directory -Force -Path "$TEST_OUTPUT\runtimes\$TARGET_RID\native" | Out-Null
          Copy-Item $LIB_PATH "$TEST_OUTPUT\runtimes\$TARGET_RID\native" -Force
          Copy-Item $LIB_PATH $TEST_OUTPUT -Force

      - name: Run tests
        timeout-minutes: 10
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          files: '**/coverage.cobertura.xml'
          fail_ci_if_error: false

      - name: Test GrepSQL CLI
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # Test basic functionality
          dotnet run --project src/GrepSQL.CLI/GrepSQL --configuration Release -- -p "SelectStmt" --from-sql "SELECT id FROM users" --count
          
          # Test s-expression patterns
          dotnet run --project src/GrepSQL.CLI/GrepSQL --configuration Release -- -p "(relname \"users\")" --from-sql "SELECT * FROM users" --count
          
          # Test highlighting
          dotnet run --project src/GrepSQL.CLI/GrepSQL --configuration Release -- -p "(relname \"users\")" --from-sql "SELECT * FROM users" --highlight --highlight-style html

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || inputs.test_release == 'true'
    
    # Remove the environment specification and use built-in token
    
    # Add permissions for this job
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build native libraries
      shell: bash
      run: |
        echo "Building native libraries for packaging"
        git submodule update --init --recursive
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Restore dependencies
      run: dotnet restore

    - name: Build for packaging
      run: dotnet build --configuration Release --no-restore

    - name: Pack NuGet package
      run: dotnet pack src/GrepSQL/GrepSQL.csproj --configuration Release --no-build --output ./artifacts

    - name: Debug - Show package contents
      shell: bash
      run: |
        echo "=== Created packages ==="
        ls -la ./artifacts/
        echo "=== Package details ==="
        dotnet nuget list source || echo "No sources configured"

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg

    - name: Publish to NuGet.org (if release)
      if: github.event_name == 'release'
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        echo "Publishing to NuGet.org..."
        dotnet nuget push ./artifacts/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
      continue-on-error: true

    - name: Publish to GitHub Packages (if release)
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Publishing to GitHub Packages..."
        dotnet nuget push ./artifacts/*.nupkg --api-key $GITHUB_TOKEN --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
      continue-on-error: true

    - name: Test mode - skip publishing
      if: inputs.test_release == 'true'
      run: |
        echo "Test mode: Skipping package publishing"
        echo "Would publish to NuGet.org with key: ${{ secrets.NUGET_API_KEY != '' && '[CONFIGURED]' || '[NOT CONFIGURED]' }}"
        echo "Would publish to GitHub Packages with token: ${{ secrets.GITHUB_TOKEN != '' && '[AVAILABLE]' || '[NOT AVAILABLE]' }}"

  release-binaries:
    name: Create Release Binaries
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || inputs.test_release == 'true'
    
    # Add permissions for this job
    permissions:
      contents: write
      actions: read
      
    strategy:
      matrix:
        runtime: [win-x64, linux-x64, osx-x64, osx-arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_FRAMEWORK_VERSION }}

    - name: Build native libraries (non-Windows only)
      if: matrix.runtime != 'win-x64'
      shell: bash
      run: |
        echo "Building native libraries for ${{ matrix.runtime }}"
        git submodule update --init --recursive
        chmod +x scripts/build.sh
        ./scripts/build.sh

    - name: Publish GrepSQL for ${{ matrix.runtime }}
      run: dotnet publish src/GrepSQL.CLI/GrepSQL/GrepSQL.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./dist/${{ matrix.runtime }} -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true

    - name: Debug - Show published files
      shell: bash
      run: |
        echo "=== Published files for ${{ matrix.runtime }} ==="
        ls -la ./dist/${{ matrix.runtime }}/
        echo "=== Archive will be created from these files ==="

    - name: Create archive
      shell: bash
      run: |
        cd ./dist/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == "win-x64" ]]; then
          zip -r ../../grepsql-${{ matrix.runtime }}.zip .
        else
          tar czf ../../grepsql-${{ matrix.runtime }}.tar.gz .
        fi
        cd ../..
        echo "=== Created archive ==="
        ls -la grepsql-${{ matrix.runtime }}.*

    - name: Upload release assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: grepsql-${{ matrix.runtime }}.${{ matrix.runtime == 'win-x64' && 'zip' || 'tar.gz' }}
        tag_name: ${{ github.ref_name }}
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload test artifacts (test mode only)
      if: inputs.test_release == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: test-release-${{ matrix.runtime }}
        path: grepsql-${{ matrix.runtime }}.${{ matrix.runtime == 'win-x64' && 'zip' || 'tar.gz' }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run performance tests
      shell: bash
      run: |
        echo "Running basic performance tests..."
        
        # Test large query parsing performance
        time dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "SelectStmt" --from-sql "$(printf 'SELECT id FROM users UNION %.0s' {1..100})" --count
        
        # Test complex pattern matching performance  
        time dotnet run --project src/GrepSQL/GrepSQL --configuration Release -- -p "(... (whereClause ...))" --from-sql "SELECT * FROM users WHERE age > 18 AND status = 'active' AND created_at > '2024-01-01'" --count

  debug-release:
    name: Debug Release Information
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || inputs.test_release == 'true'
    
    permissions:
      contents: read
      
    steps:
    - name: Debug release context
      shell: bash
      run: |
        echo "=== GitHub Context ==="
        echo "Event name: ${{ github.event_name }}"
        echo "Event action: ${{ github.event.action }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref name: ${{ github.ref_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Actor: ${{ github.actor }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "=== Token permissions ==="
        echo "GITHUB_TOKEN is set: ${{ secrets.GITHUB_TOKEN != '' }}"
        echo "=== Release event details ==="
        echo "Release tag: ${{ github.event.release.tag_name }}"
        echo "Release name: ${{ github.event.release.name }}"
        echo "Release draft: ${{ github.event.release.draft }}"
        echo "Release prerelease: ${{ github.event.release.prerelease }}"